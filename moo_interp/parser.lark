start: code

code:
	| statement*



?statement:
	| expression _SEMI
	| if_statement
	| return_statement _SEMI
	| for_statement
	| while_statement
	| fork_statement
	| try_except_statement
	| try_finally_statement
	| break_statement _SEMI
	| continue_statement _SEMI
	| scatter_statement _SEMI

?condition: expression

then_block: statement*

if_clause: "if" "(" condition ")" then_block
elseif_clause: "elseif" "(" condition ")" then_block
else_clause: "else" then_block

if_statement: if_clause elseif_clause* else_clause? "endif"

for_clause: "for" IDENTIFIER IN "(" expression ")" | "for" IDENTIFIER IN "[" (expression ".." (expression | "$")) "]"

for_statement: for_clause statement* "endfor"

while_clause: "while" (IDENTIFIER)? "(" expression ")"

while_statement: while_clause statement* "endwhile"

fork_clause: "fork" "(" expression ")"

fork_statement: fork_clause statement* "endfork"

return_statement: "return" expression?

scatter_statement: "{" scattering_target "}" "=" expression

try_except_statement: "try" statement* except_statement+ "endtry"

except_statement: except_clause statement*

except_clause: "except" (IDENTIFIER)? "(" exception_codes ")"

exception_code: IDENTIFIER | "error"

exception_codes: "@" expression | "any" | exception_code ("," exception_code)*

try_finally_statement: "try" statement* finally_statement "endtry"

finally_statement: "finally" statement*

break_statement: "break" IDENTIFIER?

continue_statement: "continue" IDENTIFIER?

dict : "[" map_entry_expression ("," map_entry_expression)* "]"
list : "{" [expression ("," expression)*] "}"
map_entry_expression : STRING "->" expression

unary_expression: ("!" | "~" | "-") expression
binary_expression: expression BINARY_OP expression
BINARY_OP: ("+" | "-" | "*" | "/" | "^" | "%" | ">>" | "<<" | "&." | "|." | "^." | IN | "==" | ">=" | "<=" | "!=" | "<" | ">")

?expression: paren
          | ternary
          | catch
          | splicer
          | index
          | range
          | property
          | verb
          | unary_expression
          | binary_expression
          | call
          | assign
          | literal
          | IDENTIFIER

paren: "(" expression ")"

ternary: expression "?" expression "|" expression

catch: "`" expression "!" exception_codes ("=>" expression)? "'"

splicer: "@" expression

index: expression "[" ("^" | "$" | expression) "]"

range: expression "[" ("^" | expression) ".." ("$" | expression) "]"

property: expression "." (IDENTIFIER | "(" expression ")")

verb: expression ":" (IDENTIFIER | "(" expression ")") "(" call_arguments ")"

call: IDENTIFIER "(" call_arguments ")"

assign: expression "=" expression

literal: "error" | STRING | "object" | NUMBER | FLOAT | BOOLEAN | list | dict
BOOLEAN: "true" | "false"

call_arguments: (expression ("," expression)*)?

scattering_target: scattering_target_item ("," scattering_target_item)*

scattering_target_item: IDENTIFIER | "?" IDENTIFIER ("=" expression)? | "@" IDENTIFIER

_SEMI: ";"
IDENTIFIER.-5: (("_"|"$"|LETTER) ("_"|LETTER|DIGIT)*)
STRING: /".*?"|'.*?'/
IN: "in"
NUMBER: /-?[0-9]+/
FLOAT: /-?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?/
LETTER: /[a-zA-Z]/
DIGIT: /\d/
WS: /[ \t\n\r\f]+/

%ignore WS

